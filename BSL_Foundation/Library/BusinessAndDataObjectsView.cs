
using System.Collections.Generic;
using System.IO;
using System.Text;

namespace KPIT_K_Foundation
{
  internal class BusinessAndDataObjectsView
  {
    private string _fileExtension = ".cs";
    private Tables _selectedTables;
    private string _directory;
    private Language _language;
    private string _webAppName;
    private bool _isUseStoredProcedure;
    private IsCheckedView _isCheckedView;
    private ViewNames _viewNames;
    private bool _isUseWebApi;
    private DatabaseObjectToGenerateFrom _generateFrom;
    private ApplicationVersion _appVersion;
    private bool _isAlternateColor;
    private string _alternateBackgroundColor;
    private string _categoryTitleBackgroundColor;
    private bool _isFormsGenProduct;
    private int _spPrefixSuffixIndex;
    private string _storedProcPrefix;
    private string _storedProcSuffix;
    private string _apiName;

    private BusinessAndDataObjectsView()
    {
    }

    internal BusinessAndDataObjectsView(Tables selectedTables, string directory, Language language, string webAppName, DatabaseObjectToGenerateFrom generateFrom, ApplicationVersion appVersion, bool isUseStoredProcedure, IsCheckedView isCheckedView, ViewNames viewNames, bool isUseWebApi, bool isFormsGenProduct, int spPrefixSuffixIndex, string storedProcPrefix, string storedProcSuffix, string apiName)
    {
      this._selectedTables = selectedTables;
      this._directory = directory + MyConstants.DirectoryRazorPage + "Home\\";
      this._language = language;
      this._webAppName = webAppName.Trim();
      this._isUseStoredProcedure = isUseStoredProcedure;
      this._spPrefixSuffixIndex = spPrefixSuffixIndex;
      this._storedProcPrefix = storedProcPrefix;
      this._storedProcSuffix = storedProcSuffix;
      this._generateFrom = generateFrom;
      this._appVersion = appVersion;
      this._isCheckedView = isCheckedView;
      this._viewNames = viewNames;
      this._isUseWebApi = isUseWebApi;
      this._isFormsGenProduct = isFormsGenProduct;
      this._categoryTitleBackgroundColor = "#507CD1";
      this._alternateBackgroundColor = "#F5F5F5";
      this._apiName = apiName;
      if (language == Language.VB)
        this._fileExtension = ".vb";
      this.Generate();
    }

    private void Generate()
    {
      using (StreamWriter streamWriter = new StreamWriter(this._directory + "BusinessAndDataObjects" + this._fileExtension + "html"))
      {
        StringBuilder sb = new StringBuilder();
        if (this._language == Language.CSharp)
        {
          sb.AppendLine("@{");
          sb.AppendLine("    ViewBag.Title = \"Generated Business and Data Objects\";");
          sb.AppendLine("}");
        }
        else
        {
          sb.AppendLine("@Code");
          sb.AppendLine("    ViewBag.Title = \"Generated Business and Data Objects\"");
          sb.AppendLine("End Code");
        }
        sb.AppendLine("");
        sb.AppendLine("<br/><br/>");
        if (MySettings.AppVersion == ApplicationVersion.ProfessionalPlus)
          sb.AppendLine("<b>Thank You for using " + MySettings.AppTitle + " Listed below are the Middle-Tier, Data-Tier, and SQL code generated by " + MySettings.AppTitle + ".</b><br/><br/>");
        else
          sb.AppendLine("<b>Thank You for using " + MySettings.AppTitle + " Listed below are the Middle-Tier, and Data-Tier, code generated by " + MySettings.AppTitle + ".</b><br/><br/>");
        sb.AppendLine("The following classes were generated in the <b>" + this._apiName + "</b> Project.<br/><br/>");
        sb.AppendLine("<table style=\"width: 100%\">");
        this.WriteLinks(sb, "Business Object Classes <i>(BusinessObject folder)</i>", CodeToGenerateType.BusinessObject);
        this.WriteLinks(sb, "Business Object Base Classes <i>(BusinessObjectBase folder)</i>", CodeToGenerateType.BusinessObjectBase);
        this.WriteLinks(sb, "Data Layer Classes <i>(DataLayer folder)</i>", CodeToGenerateType.DataLayer);
        this.WriteLinks(sb, "Data Layer Base Classes <i>(DataLayerBase folder)</i>", CodeToGenerateType.DataLayerBase);
        this.WriteLinks(sb, "Code Examples <i>(CodeExamples folder)</i>", CodeToGenerateType.CodeExample);
        if (this._appVersion != ApplicationVersion.Express)
        {
          if (this._isUseStoredProcedure)
            this.WriteStoredProcLinks(sb, "Stored Procedures <i>(Generated in SQL Server)</i>");
          else
            this.WriteLinks(sb, "Dynamic SQL Classes <i>(SQL folder)</i>", CodeToGenerateType.DynamicSql);
          this.WriteLinks(sb, "Helper Classes <i>(Helper folder)</i>", CodeToGenerateType.Helper);
          this.WriteLinks(sb, "Helper Classes <i>(Domain folder)</i>", CodeToGenerateType.DomainHelper);
        }
        sb.AppendLine("</table>");
        streamWriter.Write(sb.ToString());
      }
    }

    private void WriteLinks(StringBuilder sb, string title, CodeToGenerateType codeToGenerateType)
    {
      this.GenerateTagsBeforeLinks(sb, title);
      if (codeToGenerateType == CodeToGenerateType.Helper || codeToGenerateType == CodeToGenerateType.DomainHelper)
      {
        this.GenerateLinks(sb, codeToGenerateType, (Table) null);
      }
      else
      {
        foreach (Table selectedTable in (List<Table>) this._selectedTables)
        {
          if (!selectedTable.IsContainsPrimaryAndForeignKeyColumnsOnly)
            this.GenerateLinks(sb, codeToGenerateType, selectedTable);
        }
      }
      this.GenerateTagsAfterLinks(sb, codeToGenerateType);
    }

    private void WriteStoredProcLinks(StringBuilder sb, string title)
    {
      this.GenerateTagsBeforeLinks(sb, title);
      foreach (Table selectedTable in (List<Table>) this._selectedTables)
      {
        if (this._generateFrom == DatabaseObjectToGenerateFrom.Tables)
        {
          this.GenerateStoredProcLinks(sb, selectedTable, StoredProcName.Delete);
          this.GenerateStoredProcLinks(sb, selectedTable, StoredProcName.GetRecordCount);
          this.GenerateStoredProcLinks(sb, selectedTable, StoredProcName.GetRecordCountBy);
          this.GenerateStoredProcLinks(sb, selectedTable, StoredProcName.GetRecordCountWhereDynamic);
          this.GenerateStoredProcLinks(sb, selectedTable, StoredProcName.Insert);
          this.GenerateStoredProcLinks(sb, selectedTable, StoredProcName.SelectAll);
          this.GenerateStoredProcLinks(sb, selectedTable, StoredProcName.SelectAllBy);
          this.GenerateStoredProcLinks(sb, selectedTable, StoredProcName.SelectAllWhereDynamic);
          this.GenerateStoredProcLinks(sb, selectedTable, StoredProcName.SelectByPrimaryKey);
          this.GenerateStoredProcLinks(sb, selectedTable, StoredProcName.SelectDropDownListData);
          this.GenerateStoredProcLinks(sb, selectedTable, StoredProcName.SelectSkipAndTake);
          this.GenerateStoredProcLinks(sb, selectedTable, StoredProcName.SelectSkipAndTakeBy);
          if (selectedTable.IsContainsMoneyOrDecimalField)
            this.GenerateStoredProcLinks(sb, selectedTable, StoredProcName.SelectTotals);
          this.GenerateStoredProcLinks(sb, selectedTable, StoredProcName.SelectSkipAndTakeWhereDynamic);
          this.GenerateStoredProcLinks(sb, selectedTable, StoredProcName.Update);
        }
        else
          this.GenerateStoredProcLinks(sb, selectedTable, StoredProcName.SelectAll);
      }
      this.GenerateTagsAfterLinks(sb, CodeToGenerateType.StoredProcedure);
    }

    private void GenerateTagsBeforeLinks(StringBuilder sb, string title)
    {
      string str;
      if (this._isAlternateColor)
      {
        str = "white";
        this._isAlternateColor = false;
      }
      else
      {
        str = this._alternateBackgroundColor;
        this._isAlternateColor = true;
      }
      sb.AppendLine("        <tr style=\"color: White; background-color: " + this._categoryTitleBackgroundColor + "; font-weight: bold; font-size: 12px; height: 18px; padding: 8px;\">");
      sb.AppendLine("            <td>" + title + "</td>");
      sb.AppendLine("            <td style=\"text-align: center;\">Features</td>");
      sb.AppendLine("        </tr>");
      sb.AppendLine("        <tr style=\"background-color: " + str + "; padding: 8px;\">");
      sb.AppendLine("            <td style=\"vertical-align: top;\">");
      sb.AppendLine("                <ul>");
    }

    private void GenerateTagsAfterLinks(StringBuilder sb, CodeToGenerateType codeToGenerateType)
    {
      sb.AppendLine("                </ul>");
      sb.AppendLine("            </td>");
      sb.AppendLine("            <td style=\"vertical-align: top;\">");
      this.GenerateFeaturesForCodeToGenerate(sb, codeToGenerateType);
      sb.AppendLine("            </td>");
      sb.AppendLine("        </tr>");
    }

    private void GenerateLinks(StringBuilder sb, CodeToGenerateType codeToGenerateType, Table table)
    {
      switch (codeToGenerateType)
      {
        case CodeToGenerateType.Helper:
          if (!this._isFormsGenProduct)
            break;
          sb.AppendLine("                    <li>Functions" + this._fileExtension + "</li>");
          break;
        case CodeToGenerateType.DomainHelper:
          sb.AppendLine("                    <li>CrudOperation" + this._fileExtension + "</li>");
          sb.AppendLine("                    <li>FieldType" + this._fileExtension + "</li>");
          break;
        default:
          string codeToGenerateType1 = this.GetWordByCodeToGenerateType(codeToGenerateType);
          string str = table.Name + codeToGenerateType1 + this._fileExtension;
          sb.AppendLine("                    <li>" + str + "</li>");
          break;
      }
    }

    private void GenerateStoredProcLinks(StringBuilder sb, Table table, StoredProcName storedProc)
    {
      if (storedProc == StoredProcName.SelectAllBy || storedProc == StoredProcName.SelectSkipAndTakeBy || storedProc == StoredProcName.GetRecordCountBy)
      {
        StringBuilder stringBuilder = new StringBuilder();
        int num = 0;
        foreach (Column column in (List<Column>) table.Columns)
        {
          if (column.IsForeignKey)
          {
            string foreignKeyTableName = column.ForeignKeyTableName;
            if (stringBuilder.ToString().Contains(column.ForeignKeyTableName + ","))
            {
              ++num;
              string str = foreignKeyTableName + num.ToString();
            }
            string storedProcNameBy = Functions.GetStoredProcNameBy(table, column, this._spPrefixSuffixIndex, this._storedProcPrefix, this._storedProcSuffix, storedProc);
            sb.AppendLine("                    <li>" + storedProcNameBy + "</li>");
          }
        }
      }
      else
      {
        string storedProcName = Functions.GetStoredProcName(table, storedProc, this._spPrefixSuffixIndex, this._storedProcPrefix, this._storedProcSuffix);
        if (storedProc == StoredProcName.SelectByPrimaryKey || storedProc == StoredProcName.Update || storedProc == StoredProcName.SelectDropDownListData)
        {
          if (!table.IsContainsPrimaryAndForeignKeyColumnsOnly)
          {
            if (storedProc == StoredProcName.Update)
              sb.AppendLine("                    <li>" + storedProcName + "<br/><br/></li>");
            else
              sb.AppendLine("                    <li>" + storedProcName + "</li>");
          }
          else
          {
            if (storedProc != StoredProcName.Update)
              return;
            sb.Replace("</li>", "<br/><br/></li>", sb.ToString().LastIndexOf("</li>"), 5);
          }
        }
        else
          sb.AppendLine("                    <li>" + storedProcName + "</li>");
      }
    }

    private void GenerateFeaturesForCodeToGenerate(StringBuilder sb, CodeToGenerateType codeToGenerateType)
    {
      switch (codeToGenerateType)
      {
        case CodeToGenerateType.DataLayerBase:
          sb.AppendLine("                <ul>");
          sb.AppendLine("                    <li><b>Used as the base class to the Data Layer class</b></li>");
          sb.AppendLine("                    <li><b>Do not add or edit code here</b></li>");
          sb.AppendLine("                    <li>Encapsulates calls to Stored Procedures or Dynamic SQL</li>");
          sb.AppendLine("                    <li>One Class is generated per table</li>");
          sb.AppendLine("                    <li>Located in the " + MyConstants.DirectoryDataLayerBase + " folder</li>");
          sb.AppendLine("                </ul>");
          break;
        case CodeToGenerateType.DataLayer:
          sb.AppendLine("                <ul>");
          sb.AppendLine("                    <li><b>Used as the gateway data layer object the middle tier objects call</b></li>");
          sb.AppendLine("                    <li>Inherits from the respective DataLayerBase class</li>");
          sb.AppendLine("                    <li>You can add additional code here (it will not be overwritten by the generator)</li>");
          sb.AppendLine("                    <li>One Class is generated per table</li>");
          sb.AppendLine("                    <li>Located in the " + MyConstants.DirectoryDataLayer + " folder</li>");
          sb.AppendLine("                </ul>");
          break;
        case CodeToGenerateType.BusinessObjectBase:
          sb.AppendLine("                <ul>");
          sb.AppendLine("                    <li><b>Used as the base class to the Business Object class</b></li>");
          sb.AppendLine("                    <li><b>Do not add or edit code here</b></li>");
          sb.AppendLine("                    <li>Contains table fields as properties</li>");
          sb.AppendLine("                    <li>Encapsulates calls to the data layer</li>");
          sb.AppendLine("                    <li>One Class is generated per table</li>");
          sb.AppendLine("                    <li>Located in the " + MyConstants.DirectoryBusinessObjectBase + " folder</li>");
          sb.AppendLine("                </ul>");
          break;
        case CodeToGenerateType.BusinessObject:
          sb.AppendLine("                <ul>");
          sb.AppendLine("                    <li style=\"color: red;\"><b>Note: The only code you call from your application</b></li>");
          sb.AppendLine("                    <li><b>Used as the gateway middle layer object the client calls</b></li>");
          sb.AppendLine("                    <li>Most CRUD calls can be made in one (1) line of code</li>");
          sb.AppendLine("                    <li>Inherits from the respective BusinessObjectBase class</li>");
          sb.AppendLine("                    <li>You can add additional code here (it will not be overwritten by the generator)</li>");
          sb.AppendLine("                    <li>One Class is generated per table</li>");
          sb.AppendLine("                    <li>Located in the " + MyConstants.DirectoryBusinessObject + " folder</li>");
          sb.AppendLine("                </ul>");
          break;
        case CodeToGenerateType.BusinessObjectCollection:
          sb.AppendLine("                <ul>");
          sb.AppendLine("                    <li><b>Used as the Collection of the Business Object Class</b></li>");
          sb.AppendLine("                    <li><b>Do not add or edit code here</b></li>");
          sb.AppendLine("                    <li>One Class is generated per table</li>");
          sb.AppendLine("                    <li>Located in the " + MyConstants.DirectoryBusinessObjectCollection + " folder</li>");
          sb.AppendLine("                </ul>");
          break;
        case CodeToGenerateType.CodeExample:
          sb.AppendLine("                <ul>");
          sb.AppendLine("                    <li style=\"color: red;\"><b>Generated solely to show how to use the Generated Code</b></li>");
          sb.AppendLine("                    <li>Example code can be copied and pasted directly to your client code (ASP.Net web forms, Win Forms, Web Services, etc.)</li>");
          sb.AppendLine("                    <li>You can delete the whole directory if you don't need it</li>");
          sb.AppendLine("                    <li>One Class is generated per table</li>");
          sb.AppendLine("                    <li>Located in the " + MyConstants.DirectoryExamples + " folder</li>");
          sb.AppendLine("                </ul>");
          break;
        case CodeToGenerateType.StoredProcedure:
          sb.AppendLine("                <ul>");
          sb.AppendLine("                    <li><b>Created in the database and used for CRUD operations</b></li>");
          sb.AppendLine("                    <li><b>Do not rewrite or edit generated stored procedure, instead, add a new one</b></li>");
          sb.AppendLine("                    <li>Generated Stored Procedures may include; select all, select by primary key, insert, update, delete, select/skip/take, select dynamic (search), get record count and more operations</li>");
          sb.AppendLine("                    <li>Generated only when the Stored Procedure option is selected</li>");
          sb.AppendLine("                    <li>At least 5 Stored Procedures are generated per table (for most tables)</li>");
          sb.AppendLine("                    <li>Located directly in the database</li>");
          sb.AppendLine("                </ul>");
          break;
        case CodeToGenerateType.DynamicSql:
          sb.AppendLine("                <ul>");
          sb.AppendLine("                    <li><b>Contains T-SQL CRUD (AD HOC) operations in the code</b></li>");
          sb.AppendLine("                    <li><b>Do not rewrite or edit generated Dynamic SQL, instead, new dynamic sql should be added in the DataLayer class (please see tutorial)</b></li>");
          sb.AppendLine("                    <li>Generated Dynamic SQL may include; select all, select by primary key, insert, update, delete, select/skip/take, select dynamic (search), get record count and more operations</li>");
          sb.AppendLine("                    <li>Generated only when the Dynamic SQL option is selected</li>");
          sb.AppendLine("                    <li>One Class is generated per table</li>");
          sb.AppendLine("                    <li>Located in the " + MyConstants.DirectoryDynamicSQL + " folder</li>");
          sb.AppendLine("                </ul>");
          break;
        case CodeToGenerateType.Helper:
          sb.AppendLine("                <ul>");
          sb.AppendLine("                    <li><b>Contains minimal helper methods</b></li>");
          if (this._isFormsGenProduct)
            sb.AppendLine("                    <li>Functions" + this._fileExtension + " contains static/shared functions/methods used in GridViews</li>");
          sb.AppendLine("                    <li>Located in the \\Helper\\ folder</li>");
          sb.AppendLine("                </ul>");
          break;
        case CodeToGenerateType.Models:
          sb.AppendLine("                <ul>");
          sb.AppendLine("                    <li><b>Inherited by the Business Object Base class</b></li>");
          sb.AppendLine("                    <li>Inherits from the respective ModelBase class</li>");
          sb.AppendLine("                    <li>You can add additional code (properties) here (it will not be overwritten by the generator)</li>");
          sb.AppendLine("                    <li>One Class is generated per table</li>");
          sb.AppendLine("                    <li>Located in the " + MyConstants.DirectoryModels + " folder</li>");
          sb.AppendLine("                </ul>");
          break;
        case CodeToGenerateType.ModelsBase:
          sb.AppendLine("                <ul>");
          sb.AppendLine("                    <li><b>Used as the base class to the Models class</b></li>");
          sb.AppendLine("                    <li><b>Promotes code separation.  Fields are separated from the Business Object Base class and placed here instead.</b></li>");
          sb.AppendLine("                    <li><b>Do not add or edit code here</b></li>");
          sb.AppendLine("                    <li>Contains table fields as properties</li>");
          sb.AppendLine("                    <li>Properties contain Data Annotation attributes used for model validation</li>");
          sb.AppendLine("                    <li>One Class is generated per table</li>");
          sb.AppendLine("                    <li>Located in the " + MyConstants.DirectoryModelsBase + " folder</li>");
          sb.AppendLine("                </ul>");
          break;
        case CodeToGenerateType.DomainHelper:
          sb.AppendLine("                <ul>");
          sb.AppendLine("                    <li><b>Contains helper enum methods</b></li>");
          sb.AppendLine("                    <li>Located in the \\Domain\\ folder</li>");
          sb.AppendLine("                </ul>");
          break;
      }
    }

    private string GetWordByCodeToGenerateType(CodeToGenerateType codeToGenerateType)
    {
      switch (codeToGenerateType)
      {
        case CodeToGenerateType.DataLayerBase:
          return MyConstants.WordDataLayerBase;
        case CodeToGenerateType.DataLayer:
          return MyConstants.WordDataLayer;
        case CodeToGenerateType.BusinessObjectBase:
          return MyConstants.WordBase;
        case CodeToGenerateType.BusinessObject:
          return string.Empty;
        case CodeToGenerateType.CodeExample:
          return MyConstants.WordExample;
        case CodeToGenerateType.StoredProcedure:
          return string.Empty;
        case CodeToGenerateType.DynamicSql:
          return MyConstants.WordSQL;
        case CodeToGenerateType.Models:
          return MyConstants.WordModel;
        case CodeToGenerateType.ModelsBase:
          return MyConstants.WordModelBase;
        default:
          return (string) null;
      }
    }

    private string GetFolderByCodeToGenerateType(CodeToGenerateType codeToGenerateType)
    {
      switch (codeToGenerateType)
      {
        case CodeToGenerateType.DataLayerBase:
          return MyConstants.DirectoryDataLayerBase;
        case CodeToGenerateType.DataLayer:
          return MyConstants.DirectoryDataLayer;
        case CodeToGenerateType.BusinessObjectBase:
          return MyConstants.DirectoryBusinessObjectBase;
        case CodeToGenerateType.BusinessObject:
          return MyConstants.DirectoryBusinessObject;
        case CodeToGenerateType.BusinessObjectCollection:
          return MyConstants.DirectoryBusinessObjectCollection;
        case CodeToGenerateType.CodeExample:
          return MyConstants.DirectoryExamples;
        case CodeToGenerateType.StoredProcedure:
          return MyConstants.DirectoryDynamicSQL;
        case CodeToGenerateType.DynamicSql:
          return MyConstants.DirectoryDynamicSQL;
        case CodeToGenerateType.Models:
          return MyConstants.DirectoryModels;
        case CodeToGenerateType.ModelsBase:
          return MyConstants.DirectoryModelsBase;
        default:
          return (string) null;
      }
    }
  }
}
