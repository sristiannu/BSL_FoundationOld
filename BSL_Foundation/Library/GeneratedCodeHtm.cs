
using System.Collections.Generic;
using System.Data;
using System.IO;
using System.Text;

namespace KPIT_K_Foundation
{
  internal class GeneratedCodeHtm
  {
    private string _fullFileNamePath;
    private string _appTitle;
    private Tables _selectedTables;
    private DataTable _referencedTables;
    private string _fileExtension;
    private string _directory;
    private Language _language;
    private bool _isUseStoredProcedure;
    private int _spPrefixSuffixIndex;
    private string _storedProcPrefix;
    private string _storedProcSuffix;
    private DatabaseObjectToGenerateFrom _generateFrom;
    private bool _isAlternateColor;
    private ApplicationVersion _appVersion;
    private bool _isFormsGenProduct;
    private ApplicationType _appType;
    private string _categoryTitleBackgroundColor;
    private string _alternateBackgroundColor;

    private GeneratedCodeHtm()
    {
    }

    internal GeneratedCodeHtm(string fullFileNamePath, string appTitle, Tables selectedTables, DataTable referencedTables, Language language, string path, bool isUseStoredProcedure, int spPrefixSuffixIndex, string storedProcPrefix, string storedProcSuffix, DatabaseObjectToGenerateFrom generateFrom, ApplicationVersion appVersion, bool isFormsGenProduct = true, ApplicationType appType = ApplicationType.ASPNET)
    {
      this._fullFileNamePath = fullFileNamePath;
      this._appTitle = appTitle;
      this._selectedTables = selectedTables;
      this._referencedTables = referencedTables;
      this._directory = path;
      this._language = language;
      this._fileExtension = this._language != Language.CSharp ? ".vb" : ".cs";
      this._isUseStoredProcedure = isUseStoredProcedure;
      this._spPrefixSuffixIndex = spPrefixSuffixIndex;
      this._storedProcPrefix = storedProcPrefix;
      this._storedProcSuffix = storedProcSuffix;
      this._generateFrom = generateFrom;
      this._appVersion = appVersion;
      this._isFormsGenProduct = isFormsGenProduct;
      this._appType = appType;
      if (this._appType == ApplicationType.ASPNET45)
      {
        this._categoryTitleBackgroundColor = "#6D00D9";
        this._alternateBackgroundColor = "#F2E6FF";
      }
      else
      {
        this._categoryTitleBackgroundColor = "#507CD1";
        this._alternateBackgroundColor = "#F5F5F5";
      }
      this.Generate();
    }

    private void Generate()
    {
      using (StreamWriter streamWriter = new StreamWriter(this._fullFileNamePath))
      {
        StringBuilder sb = new StringBuilder();
        sb.AppendLine("<html xmlns=\"http://www.w3.org/1999/xhtml\">");
        sb.AppendLine("<head>");
        sb.AppendLine("    <title>" + this._appTitle + " Generated Web Forms</title>");
        sb.AppendLine("    <style type=\"text/css\">");
        sb.AppendLine("        body {");
        sb.AppendLine("\t         font-family: Verdana, Arial, Tahoma, Times New Roman;");
        sb.AppendLine("\t         font-size: 11px;");
        sb.AppendLine("\t         color: #000000;");
        sb.AppendLine("        }");
        sb.AppendLine("");
        sb.AppendLine("        ul {");
        sb.AppendLine("            font-size: 11px;");
        sb.AppendLine("        }");
        sb.AppendLine("    </style>");
        sb.AppendLine("</head>");
        sb.AppendLine("<body>");
        if (this._appVersion != ApplicationVersion.Express)
          sb.AppendLine("    <b>Thank You for using " + this._appTitle + ". Listed below are the Middle-Tier, Data-Tier, and SQL code generated by " + this._appTitle + ".</b>");
        else
          sb.AppendLine("    <b>Thank You for using " + this._appTitle + ". Listed below are the Middle-Tier and Data-Tier code generated by " + this._appTitle + ".</b>");
        if (this._appType == ApplicationType.ASPNET45)
          sb.AppendLine("    <br /><b>All generated code listed here are located in the App_code folder, except for the Stored Procedures which are directly generated in MS SQL Server.</b>");
        sb.AppendLine("    <br /><br />");
        sb.AppendLine("    <table cellspacing=\"0\" cellpadding=\"0\" rules=\"all\" border=\"1\" style=\"color: Black; border-collapse: collapse;\">");
        this.WriteLinks(sb, "Business Object Classes", CodeToGenerateType.BusinessObject);
        this.WriteLinks(sb, "Business Object Base Classes", CodeToGenerateType.BusinessObjectBase);
        this.WriteLinks(sb, "Business Object Collection Classes", CodeToGenerateType.BusinessObjectCollection);
        this.WriteLinks(sb, "Data Layer Classes", CodeToGenerateType.DataLayer);
        this.WriteLinks(sb, "Data Layer Base Classes", CodeToGenerateType.DataLayerBase);
        this.WriteLinks(sb, "Code Examples", CodeToGenerateType.CodeExample);
        if (this._appVersion != ApplicationVersion.Express)
        {
          if (this._isUseStoredProcedure)
            this.WriteStoredProcLinks(sb, "Stored Procedures");
          else
            this.WriteLinks(sb, "Dynamic SQL Classes", CodeToGenerateType.DynamicSql);
          this.WriteLinks(sb, "Helper Classes", CodeToGenerateType.Helper);
          this.WriteLinks(sb, "Helper Classes", CodeToGenerateType.DomainHelper);
        }
        sb.AppendLine("    </table>");
        sb.AppendLine("</body>");
        sb.AppendLine("</html>");
        streamWriter.Write(sb.ToString());
      }
    }

    private void WriteLinks(StringBuilder sb, string title, CodeToGenerateType codeToGenerateType)
    {
      this.GenerateTagsBeforeLinks(sb, title);
      if (codeToGenerateType == CodeToGenerateType.Helper || codeToGenerateType == CodeToGenerateType.DomainHelper)
      {
        this.GenerateLinks(sb, codeToGenerateType, (Table) null);
      }
      else
      {
        foreach (Table selectedTable in (List<Table>) this._selectedTables)
        {
          if (!selectedTable.IsContainsPrimaryAndForeignKeyColumnsOnly)
            this.GenerateLinks(sb, codeToGenerateType, selectedTable);
        }
      }
      this.GenerateTagsAfterLinks(sb, codeToGenerateType);
    }

    private void WriteStoredProcLinks(StringBuilder sb, string title)
    {
      this.GenerateTagsBeforeLinks(sb, title);
      foreach (Table selectedTable in (List<Table>) this._selectedTables)
      {
        if (this._generateFrom == DatabaseObjectToGenerateFrom.Tables)
        {
          this.GenerateStoredProcLinks(sb, selectedTable, StoredProcName.Delete);
          if (this._appType == ApplicationType.ASPNET45)
          {
            this.GenerateStoredProcLinks(sb, selectedTable, StoredProcName.GetRecordCount);
            this.GenerateStoredProcLinks(sb, selectedTable, StoredProcName.GetRecordCountBy);
          }
          this.GenerateStoredProcLinks(sb, selectedTable, StoredProcName.Insert);
          this.GenerateStoredProcLinks(sb, selectedTable, StoredProcName.SelectAll);
          if (this._appType == ApplicationType.ASPNET45)
          {
            this.GenerateStoredProcLinks(sb, selectedTable, StoredProcName.SelectAllBy);
            this.GenerateStoredProcLinks(sb, selectedTable, StoredProcName.SelectAllWhereDynamic);
          }
          this.GenerateStoredProcLinks(sb, selectedTable, StoredProcName.SelectByPrimaryKey);
          this.GenerateStoredProcLinks(sb, selectedTable, StoredProcName.SelectDropDownListData);
          if (this._appType == ApplicationType.ASPNET45)
          {
            this.GenerateStoredProcLinks(sb, selectedTable, StoredProcName.SelectSkipAndTake);
            this.GenerateStoredProcLinks(sb, selectedTable, StoredProcName.SelectSkipAndTakeBy);
            if (selectedTable.IsContainsMoneyOrDecimalField)
              this.GenerateStoredProcLinks(sb, selectedTable, StoredProcName.SelectTotals);
          }
          this.GenerateStoredProcLinks(sb, selectedTable, StoredProcName.Update);
        }
        else
          this.GenerateStoredProcLinks(sb, selectedTable, StoredProcName.SelectAll);
      }
      this.GenerateTagsAfterLinks(sb, CodeToGenerateType.StoredProcedure);
    }

    private void GenerateTagsBeforeLinks(StringBuilder sb, string title)
    {
      string str;
      if (this._isAlternateColor)
      {
        str = "white";
        this._isAlternateColor = false;
      }
      else
      {
        str = this._alternateBackgroundColor;
        this._isAlternateColor = true;
      }
      sb.AppendLine("        <tr style=\"color: White; background-color: " + this._categoryTitleBackgroundColor + "; font-weight: bold; font-size: 12px; height: 18px; padding: 8px;\">");
      sb.AppendLine("            <td>" + title + "</td>");
      sb.AppendLine("            <td align=\"center\">Features</td>");
      sb.AppendLine("        </tr>");
      sb.AppendLine("        <tr style=\"background-color: " + str + "; padding: 8px;\">");
      sb.AppendLine("            <td style=\"vertical-align: top;\">");
      sb.AppendLine("                <ul>");
    }

    private void GenerateTagsAfterLinks(StringBuilder sb, CodeToGenerateType codeToGenerateType)
    {
      sb.AppendLine("                </ul>");
      sb.AppendLine("            </td>");
      sb.AppendLine("            <td style=\"vertical-align: top;\">");
      this.GenerateFeaturesForCodeToGenerate(sb, codeToGenerateType);
      sb.AppendLine("            </td>");
      sb.AppendLine("        </tr>");
    }

    private void GenerateLinks(StringBuilder sb, CodeToGenerateType codeToGenerateType, Table table)
    {
      if (codeToGenerateType == CodeToGenerateType.Helper)
      {
        if (this._appType == ApplicationType.ASPNET45)
        {
          sb.AppendLine("                    <li>Dbase" + this._fileExtension + "</li>");
          if (!this._isFormsGenProduct)
            return;
          sb.AppendLine("                    <li>Functions" + this._fileExtension + "</li>");
        }
        else
        {
          sb.AppendLine("                    <li><a href=\"" + this._directory + "\\Helper\\Dbase" + this._fileExtension + "\">Dbase" + this._fileExtension + "</a></li>");
          if (!this._isFormsGenProduct)
            return;
          sb.AppendLine("                    <li><a href=\"" + this._directory + "\\Helper\\Functions" + this._fileExtension + "\">Functions" + this._fileExtension + "</a></li>");
        }
      }
      else
      {
        string codeToGenerateType1 = this.GetWordByCodeToGenerateType(codeToGenerateType);
        string str1 = table.Name + codeToGenerateType1 + this._fileExtension;
        if (this._appType == ApplicationType.ASPNET45)
        {
          sb.AppendLine("                    <li>" + str1 + "</li>");
        }
        else
        {
          string str2 = this._directory + this.GetFolderByCodeToGenerateType(codeToGenerateType) + table.Name + codeToGenerateType1 + this._fileExtension;
          sb.AppendLine("                    <li><a href=\"" + str2 + "\">" + str1 + "</a></li>");
        }
      }
    }

    private void GenerateStoredProcLinks(StringBuilder sb, Table table, StoredProcName storedProc)
    {
      if (storedProc == StoredProcName.SelectAllBy || storedProc == StoredProcName.SelectSkipAndTakeBy || storedProc == StoredProcName.GetRecordCountBy)
      {
        StringBuilder stringBuilder = new StringBuilder();
        int num = 0;
        foreach (Column column in (List<Column>) table.Columns)
        {
          if (column.IsForeignKey)
          {
            string foreignKeyTableName = column.ForeignKeyTableName;
            if (stringBuilder.ToString().Contains(column.ForeignKeyTableName + ","))
            {
              ++num;
              string str = foreignKeyTableName + num.ToString();
            }
            string storedProcNameBy = Functions.GetStoredProcNameBy(table, column, this._spPrefixSuffixIndex, this._storedProcPrefix, this._storedProcSuffix, StoredProcName.SelectAllBy);
            sb.AppendLine("                    <li>" + storedProcNameBy + "</li>");
          }
        }
      }
      else
      {
        string storedProcName = Functions.GetStoredProcName(table, storedProc, this._spPrefixSuffixIndex, this._storedProcPrefix, this._storedProcSuffix);
        if (storedProc == StoredProcName.SelectByPrimaryKey || storedProc == StoredProcName.Update || storedProc == StoredProcName.SelectDropDownListData)
        {
          if (!table.IsContainsPrimaryAndForeignKeyColumnsOnly)
          {
            if (storedProc == StoredProcName.Update)
              sb.AppendLine("                    <li>" + storedProcName + "<br/><br/></li>");
            else
              sb.AppendLine("                    <li>" + storedProcName + "</li>");
          }
          else
          {
            if (storedProc != StoredProcName.Update)
              return;
            sb.Replace("</li>", "<br/><br/></li>", sb.ToString().LastIndexOf("</li>"), 5);
          }
        }
        else
          sb.AppendLine("                    <li>" + storedProcName + "</li>");
      }
    }

    private void GenerateFeaturesForCodeToGenerate(StringBuilder sb, CodeToGenerateType codeToGenerateType)
    {
      switch (codeToGenerateType)
      {
        case CodeToGenerateType.DataLayerBase:
          sb.AppendLine("                <ul>");
          sb.AppendLine("                    <li><b>Used as the base class to the Data Layer class</b></li>");
          sb.AppendLine("                    <li><b>Do not add or edit code here</b></li>");
          sb.AppendLine("                    <li>Encapsulates calls to Stored Procedures or Dynamic SQL</li>");
          sb.AppendLine("                    <li>One Class is generated per table</li>");
          sb.AppendLine("                    <li>Located in the " + MyConstants.DirectoryDataLayerBase + " folder</li>");
          sb.AppendLine("                </ul>");
          break;
        case CodeToGenerateType.DataLayer:
          sb.AppendLine("                <ul>");
          sb.AppendLine("                    <li><b>Used as the gateway data layer object the middle tier objects call</b></li>");
          sb.AppendLine("                    <li>Inherits from the respective DataLayerBase class</li>");
          sb.AppendLine("                    <li>You can add additional code here (it will not be overwritten by the generator)</li>");
          sb.AppendLine("                    <li>One Class is generated per table</li>");
          sb.AppendLine("                    <li>Located in the " + MyConstants.DirectoryDataLayer + " folder</li>");
          sb.AppendLine("                </ul>");
          break;
        case CodeToGenerateType.BusinessObjectBase:
          sb.AppendLine("                <ul>");
          sb.AppendLine("                    <li><b>Used as the base class to the Business Object class</b></li>");
          sb.AppendLine("                    <li><b>Do not add or edit code here</b></li>");
          sb.AppendLine("                    <li>Contains table fields as properties</li>");
          sb.AppendLine("                    <li>Encapsulates calls to the data layer</li>");
          sb.AppendLine("                    <li>One Class is generated per table</li>");
          sb.AppendLine("                    <li>Located in the " + MyConstants.DirectoryBusinessObjectBase + " folder</li>");
          sb.AppendLine("                </ul>");
          break;
        case CodeToGenerateType.BusinessObject:
          sb.AppendLine("                <ul>");
          sb.AppendLine("                    <li style=\"color: red;\"><b>Note: The only code you call from your application</b></li>");
          sb.AppendLine("                    <li><b>Used as the gateway middle layer object the client calls</b></li>");
          sb.AppendLine("                    <li>Most CRUD calls can be made in one (1) line of code</li>");
          sb.AppendLine("                    <li>Inherits from the respective BusinessObjectBase class</li>");
          sb.AppendLine("                    <li>You can add additional code here (it will not be overwritten by the generator)</li>");
          sb.AppendLine("                    <li>One Class is generated per table</li>");
          sb.AppendLine("                    <li>Located in the " + MyConstants.DirectoryBusinessObject + " folder</li>");
          sb.AppendLine("                </ul>");
          break;
        case CodeToGenerateType.BusinessObjectCollection:
          sb.AppendLine("                <ul>");
          sb.AppendLine("                    <li><b>Used as the Collection of the Business Object Class</b></li>");
          sb.AppendLine("                    <li><b>Do not add or edit code here</b></li>");
          sb.AppendLine("                    <li>One Class is generated per table</li>");
          sb.AppendLine("                    <li>Located in the " + MyConstants.DirectoryBusinessObjectCollection + " folder</li>");
          sb.AppendLine("                </ul>");
          break;
        case CodeToGenerateType.CodeExample:
          sb.AppendLine("                <ul>");
          sb.AppendLine("                    <li style=\"color: red;\"><b>Generated solely to show how to use the Generated Code</b></li>");
          sb.AppendLine("                    <li>Example code can be copied and pasted directly to your client code (ASP.Net web forms, Win Forms, Web Services, etc.)</li>");
          sb.AppendLine("                    <li>You can delete the whole directory if you don't need it</li>");
          sb.AppendLine("                    <li>One Class is generated per table</li>");
          sb.AppendLine("                    <li>Located in the " + MyConstants.DirectoryExamples + " folder</li>");
          sb.AppendLine("                </ul>");
          break;
        case CodeToGenerateType.StoredProcedure:
          sb.AppendLine("                <ul>");
          sb.AppendLine("                    <li><b>Created in the database and used for CRUD operations</b></li>");
          sb.AppendLine("                    <li><b>Do not rewrite or edit generated stored procedure, instead, add a new one</b></li>");
          sb.AppendLine("                    <li>Generated Stored Procedures may include; select all, select by primary key, insert, update, delete, and more operations</li>");
          sb.AppendLine("                    <li>Generated only when the Stored Procedure option is selected</li>");
          sb.AppendLine("                    <li>At least 5 Stored Procedures are generated per table (for most tables)</li>");
          sb.AppendLine("                    <li>Located directly in the database</li>");
          sb.AppendLine("                </ul>");
          break;
        case CodeToGenerateType.DynamicSql:
          sb.AppendLine("                <ul>");
          sb.AppendLine("                    <li><b>Contains T-SQL CRUD operations in the code</b></li>");
          sb.AppendLine("                    <li><b>Do not rewrite or edit generated Dynamic SQL, instead, new dynamic sql should be added in the DataLayer class (please see tutorial)</b></li>");
          sb.AppendLine("                    <li>Generated Dynamic SQL may include; select all, select by primary key, insert, update, delete, and more operations</li>");
          sb.AppendLine("                    <li>Generated only when the Dynamic SQL option is selected</li>");
          sb.AppendLine("                    <li>One Class is generated per table</li>");
          sb.AppendLine("                    <li>Located in the " + MyConstants.DirectoryDynamicSQL + " folder</li>");
          sb.AppendLine("                </ul>");
          break;
        case CodeToGenerateType.Helper:
          sb.AppendLine("                <ul>");
          sb.AppendLine("                    <li><b>Contains minimal helper methods</b></li>");
          sb.AppendLine("                    <li>Dbase" + this._fileExtension + " contains static/shared methods/functions that connect to the database</li>");
          sb.AppendLine("                    <li>Dbase" + this._fileExtension + " contains the connection string to the database</li>");
          if (this._isFormsGenProduct)
            sb.AppendLine("                    <li>Functions" + this._fileExtension + " contains static/shared functions/methods used in GridViews</li>");
          sb.AppendLine("                    <li>Located in the \\Helper\\ folder</li>");
          sb.AppendLine("                </ul>");
          break;
        case CodeToGenerateType.Models:
          sb.AppendLine("                <ul>");
          sb.AppendLine("                    <li><b>Inherited by the Business Object Base class</b></li>");
          sb.AppendLine("                    <li>Inherits from the respective ModelBase class</li>");
          sb.AppendLine("                    <li>You can add additional code (properties) here (it will not be overwritten by the generator)</li>");
          sb.AppendLine("                    <li>One Class is generated per table</li>");
          sb.AppendLine("                    <li>Located in the " + MyConstants.DirectoryModels + " folder</li>");
          sb.AppendLine("                </ul>");
          break;
        case CodeToGenerateType.ModelsBase:
          sb.AppendLine("                <ul>");
          sb.AppendLine("                    <li><b>Used as the base class to the Models class</b></li>");
          sb.AppendLine("                    <li><b>Promotes code separation.  Fields are separated from the Business Object Base class and placed here instead.</b></li>");
          sb.AppendLine("                    <li><b>Do not add or edit code here</b></li>");
          sb.AppendLine("                    <li>Contains table fields as properties</li>");
          sb.AppendLine("                    <li>Properties contain Data Annotation attributes used for model validation</li>");
          sb.AppendLine("                    <li>One Class is generated per table</li>");
          sb.AppendLine("                    <li>Located in the " + MyConstants.DirectoryModelsBase + " folder</li>");
          sb.AppendLine("                </ul>");
          break;
      }
    }

    private string GetWordByCodeToGenerateType(CodeToGenerateType codeToGenerateType)
    {
      switch (codeToGenerateType)
      {
        case CodeToGenerateType.DataLayerBase:
          return MyConstants.WordDataLayerBase;
        case CodeToGenerateType.DataLayer:
          return MyConstants.WordDataLayer;
        case CodeToGenerateType.BusinessObjectBase:
          return MyConstants.WordBase;
        case CodeToGenerateType.BusinessObject:
          return string.Empty;
        case CodeToGenerateType.BusinessObjectCollection:
          return MyConstants.WordList;
        case CodeToGenerateType.CodeExample:
          return MyConstants.WordExample;
        case CodeToGenerateType.StoredProcedure:
          return string.Empty;
        case CodeToGenerateType.DynamicSql:
          return MyConstants.WordSQL;
        case CodeToGenerateType.Models:
          return MyConstants.WordModel;
        case CodeToGenerateType.ModelsBase:
          return MyConstants.WordModelBase;
        default:
          return (string) null;
      }
    }

    private string GetFolderByCodeToGenerateType(CodeToGenerateType codeToGenerateType)
    {
      switch (codeToGenerateType)
      {
        case CodeToGenerateType.DataLayerBase:
          return MyConstants.DirectoryDataLayerBase;
        case CodeToGenerateType.DataLayer:
          return MyConstants.DirectoryDataLayer;
        case CodeToGenerateType.BusinessObjectBase:
          return MyConstants.DirectoryBusinessObjectBase;
        case CodeToGenerateType.BusinessObject:
          return MyConstants.DirectoryBusinessObject;
        case CodeToGenerateType.BusinessObjectCollection:
          return MyConstants.DirectoryBusinessObjectCollection;
        case CodeToGenerateType.CodeExample:
          return MyConstants.DirectoryExamples;
        case CodeToGenerateType.StoredProcedure:
          return MyConstants.DirectoryDynamicSQL;
        case CodeToGenerateType.DynamicSql:
          return MyConstants.DirectoryDynamicSQL;
        case CodeToGenerateType.Models:
          return MyConstants.DirectoryModels;
        case CodeToGenerateType.ModelsBase:
          return MyConstants.DirectoryModelsBase;
        default:
          return (string) null;
      }
    }
  }
}
