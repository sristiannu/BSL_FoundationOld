
using System.Collections.Generic;
using System.Data;
using System.IO;
using System.Text;

namespace KPIT_K_Foundation
{
  internal class DefaultHtm
  {
    private string _fullFileNamePath;
    private string _appTitle;
    private Language _language;
    private Tables _selectedTables;
    private DataTable _referencedTables;
    private bool _isOrganizeGeneratedWebForms;
    private OrganizeWebForm _organizeWebForm;
    private IsCheckedWebForm _isCheckedWebForm;
    private DatabaseObjectToGenerateFrom _generateFrom;
    private bool _isAlternateColor;
    private Table _referencingTable;
    private Table _fkTable;
    private Column _fkColumn;
    private ApplicationVersion _appVersion;
    private ApplicationType _appType;
    private string _categoryTitleBackgroundColor;
    private string _alternateBackgroundColor;
    private bool _isUseFriendlyUrls;

    private DefaultHtm()
    {
    }

    internal DefaultHtm(string fullFileNamePath, string appTitle, Tables selectedTables, Language language, bool isOrganizeGeneratedWebForms, OrganizeWebForm organizeWebForm, IsCheckedWebForm isCheckedWebForm, DatabaseObjectToGenerateFrom generateFrom, DataTable referencedTables, ApplicationVersion appVersion, ApplicationType appType, bool isUseFriendlyUrls = false)
    {
      this._fullFileNamePath = fullFileNamePath;
      this._appTitle = appTitle;
      this._selectedTables = selectedTables;
      this._referencedTables = referencedTables;
      this._language = language;
      this._isOrganizeGeneratedWebForms = isOrganizeGeneratedWebForms;
      this._organizeWebForm = organizeWebForm;
      this._isCheckedWebForm = isCheckedWebForm;
      this._generateFrom = generateFrom;
      this._referencingTable = (Table) null;
      this._appVersion = appVersion;
      this._appType = appType;
      this._isUseFriendlyUrls = isUseFriendlyUrls;
      if (this._appType == ApplicationType.ASPNET45)
      {
        this._categoryTitleBackgroundColor = "#6D00D9";
        this._alternateBackgroundColor = "#F2E6FF";
      }
      else
      {
        this._categoryTitleBackgroundColor = "#507CD1";
        this._alternateBackgroundColor = "#F5F5F5";
      }
      this.Generate();
    }

    private void Generate()
    {
      using (StreamWriter streamWriter = new StreamWriter(this._fullFileNamePath))
      {
        StringBuilder sb = new StringBuilder();
        sb.AppendLine("<html xmlns=\"http://www.w3.org/1999/xhtml\">");
        sb.AppendLine("<head>");
        sb.AppendLine("    <title>" + this._appTitle + " Generated Middle-Tier, Data-Tier, and SQL Code</title>");
        sb.AppendLine("    <style type=\"text/css\">");
        sb.AppendLine("        body {");
        sb.AppendLine("\t         font-family: Verdana, Arial, Tahoma, Times New Roman;");
        sb.AppendLine("\t         font-size: 11px;");
        sb.AppendLine("\t         color: #000000;");
        sb.AppendLine("        }");
        sb.AppendLine("");
        sb.AppendLine("        a:link, a:visited {");
        sb.AppendLine("\t         font-size: 11px;");
        sb.AppendLine("        \t color: navy;");
        sb.AppendLine("\t         text-decoration: underline;");
        sb.AppendLine("        }");
        sb.AppendLine("");
        sb.AppendLine("        a:hover {");
        sb.AppendLine("\t         font-size: 11px;");
        sb.AppendLine("        \t color: red;");
        sb.AppendLine("\t         text-decoration: none;");
        sb.AppendLine("\t         border-bottom-width: 1px;");
        sb.AppendLine("\t         border-bottom-style: dotted;");
        sb.AppendLine("        }");
        sb.AppendLine("");
        sb.AppendLine("        ul {");
        sb.AppendLine("            font-size: 11px;");
        sb.AppendLine("        }");
        sb.AppendLine("    </style>");
        sb.AppendLine("</head>");
        sb.AppendLine("<body>");
        sb.AppendLine("    <b>Thank You for using " + this._appTitle + ". Listed below are the ASP.NET 4.5 Web Forms generated by " + this._appTitle + ".</b><br /><br />");
        sb.AppendLine("    <b>Please <a href='GeneratedCode.htm' target='_blank'>click here</a> to see the list of generated Middle-Tier (Business Objects) and Data-Tier code.</b><br/><br/>");
        sb.AppendLine("    <br /><br />");
        sb.AppendLine("    <table cellspacing=\"0\" cellpadding=\"0\" rules=\"all\" border=\"1\" style=\"color: Black; border-collapse: collapse;\">");
        if (this._generateFrom == DatabaseObjectToGenerateFrom.Tables)
        {
          if (this._appVersion != ApplicationVersion.Express)
          {
            if (this._isCheckedWebForm.GridViewRedirect)
              this.WriteLinks(sb, "GridView with Add, Edit Redirect, & Delete", GridViewType.Redirect, this._organizeWebForm.FolderForCheckedWebFormGridView, this._organizeWebForm.PrefixForCheckedWebFormGridView);
            if (this._isCheckedWebForm.GridViewAddEdit)
              this.WriteLinks(sb, "GridView with Add, Edit, & Delete (Functionality on the Same Page)", GridViewType.AddEdit, this._organizeWebForm.FolderForCheckedWebFormGridViewAddEdit, this._organizeWebForm.PrefixForCheckedWebFormGridViewAddEdit);
            if (this._isCheckedWebForm.GridViewReadOnly)
              this.WriteLinks(sb, "GridView, Read-Only", GridViewType.ReadOnly, this._organizeWebForm.FolderForCheckedWebFormGridViewReadOnly, this._organizeWebForm.PrefixForCheckedWebFormGridViewReadOnly);
            if (this._isCheckedWebForm.GridViewMoreInfo)
              this.WriteLinks(sb, "GridView, More Information", GridViewType.MoreInfoOnly, this._organizeWebForm.FolderForCheckedWebFormGridViewMoreInfo, this._organizeWebForm.PrefixForCheckedWebFormGridViewMoreInfo);
            if (this._isCheckedWebForm.GridViewFilterBy)
              this.WriteFilterByLinks(sb, "GridView Filtered By a Drop Down List", GridViewType.FilterBy, this._organizeWebForm.FolderForCheckedWebFormGridViewFilterBy, this._organizeWebForm.PrefixForCheckedWebFormGridViewFilterBy);
            if (this._isCheckedWebForm.GridViewTotals)
              this.WriteLinks(sb, "GridView with Totals", GridViewType.Totals, this._organizeWebForm.FolderForCheckedWebFormGridViewTotals, this._organizeWebForm.PrefixForCheckedWebFormGridViewTotals);
            if (this._isCheckedWebForm.GridViewGrouping)
              this.WriteGroupingLinks(sb, "GridView within an Accordion (Grouping)", this._organizeWebForm.FolderForCheckedWebFormGridViewGrouping, this._organizeWebForm.PrefixForCheckedWebFormGridViewGrouping);
            if (this._appType == ApplicationType.ASPNET45)
            {
              if (this._isCheckedWebForm.GridViewInline)
                this.WriteLinks(sb, "GridView with Add, Edit, Delete (Inline)", GridViewType.Inline, this._organizeWebForm.FolderForCheckedWebFormGridViewInline, this._organizeWebForm.PrefixForCheckedWebFormGridViewInline);
              if (this._isCheckedWebForm.GridViewSearch)
                this.WriteLinks(sb, "GridView with Search", GridViewType.Search, this._organizeWebForm.FolderForCheckedWebFormGridViewSearch, this._organizeWebForm.PrefixForCheckedWebFormGridViewSearch);
            }
            if (this._isCheckedWebForm.AddEdit)
              this.WriteLinks(sb, "Add New & Edit Record", GridViewType.NotAGridView, this._organizeWebForm.FolderForCheckedWebFormAddEdit, this._organizeWebForm.PrefixForCheckedWebFormAddEdit);
            if (this._isCheckedWebForm.RecordDetails)
              this.WriteLinks(sb, "Record Details (Read-Only)", GridViewType.NotAGridView, this._organizeWebForm.FolderForCheckedWebFormRecordDetails, this._organizeWebForm.PrefixForCheckedWebFormRecordDetails);
          }
          if (this._isCheckedWebForm.Unbound)
            this.WriteLinks(sb, "Unbound Web Form", GridViewType.NotAGridView, this._organizeWebForm.FolderForCheckedWebFormUnbound, this._organizeWebForm.PrefixForCheckedWebFormUnbound);
        }
        if (this._generateFrom == DatabaseObjectToGenerateFrom.Views && this._appVersion != ApplicationVersion.Express)
          this.WriteLinks(sb, "GridView, Read-Only", GridViewType.ReadOnly, this._organizeWebForm.FolderForCheckedWebFormGridViewReadOnly, this._organizeWebForm.PrefixForCheckedWebFormGridViewReadOnly);
        sb.AppendLine("    </table>");
        sb.AppendLine("</body>");
        sb.AppendLine("</html>");
        streamWriter.Write(sb.ToString());
      }
    }

    private void WriteFilterByLinks(StringBuilder sb, string title, GridViewType gridViewType, string organizeWebFormFolder, string organizeWebFormPrefix)
    {
      this.GenerateTagsBeforeLinks(sb, title);
      foreach (Table selectedTable in (List<Table>) this._selectedTables)
      {
        if (selectedTable.ForeignKeyCount > 0)
        {
          foreach (Column column in (List<Column>) selectedTable.Columns)
          {
            if (column.IsForeignKeyAndFKTableIsSelectedAndOnlyOnePK)
            {
              this._fkColumn = column;
              this._fkTable = column.ForeignKeyTable;
              this.GenerateLinks(sb, title, gridViewType, organizeWebFormFolder, organizeWebFormPrefix, selectedTable);
            }
          }
        }
      }
      this.GenerateTagsAfterLinks(sb, GridViewType.FilterBy, title);
    }

    private void WriteGroupingLinks(StringBuilder sb, string title, string organizeWebFormFolder, string organizeWebFormPrefix)
    {
      this.GenerateTagsBeforeLinks(sb, title);
      foreach (Table selectedTable in (List<Table>) this._selectedTables)
      {
        if (selectedTable.PrimaryKeyCount == 1)
        {
          StringBuilder stringBuilder = new StringBuilder();
          if (this._referencedTables != null && this._referencedTables.Rows.Count > 0)
          {
            foreach (DataRow row in (InternalDataCollectionBase) this._referencedTables.Rows)
            {
              this._referencingTable = (Table) null;
              if (selectedTable.OwnerOriginal == row[4].ToString() && selectedTable.NameOriginal == row[5].ToString())
              {
                string pascal1 = Functions.ConvertToPascal(row[1].ToString());
                string pascal2 = Functions.ConvertToPascal(row[2].ToString());
                Functions.ConvertToPascal(row[6].ToString());
                if (!stringBuilder.ToString().Contains(pascal2 + ","))
                {
                  this._referencingTable = Functions.GetTableFromSelectedTables(pascal1, pascal2, this._selectedTables);
                  if (this._referencingTable != null)
                  {
                    this.GenerateLinks(sb, title, GridViewType.Grouping, organizeWebFormFolder, organizeWebFormPrefix, selectedTable);
                    stringBuilder.Append(pascal2 + ",");
                  }
                }
              }
            }
          }
        }
      }
      this.GenerateTagsAfterLinks(sb, GridViewType.Grouping, title);
    }

    private void WriteLinks(StringBuilder sb, string title, GridViewType gridViewType, string organizeWebFormFolder, string organizeWebFormPrefix)
    {
      this.GenerateTagsBeforeLinks(sb, title);
      foreach (Table selectedTable in (List<Table>) this._selectedTables)
      {
        if (gridViewType == GridViewType.Totals && selectedTable.IsContainsMoneyOrDecimalField || gridViewType != GridViewType.Totals)
          this.GenerateLinks(sb, title, gridViewType, organizeWebFormFolder, organizeWebFormPrefix, selectedTable);
      }
      this.GenerateTagsAfterLinks(sb, gridViewType, title);
    }

    private void GenerateTagsBeforeLinks(StringBuilder sb, string title)
    {
      string str;
      if (this._isAlternateColor)
      {
        str = "white";
        this._isAlternateColor = false;
      }
      else
      {
        str = this._alternateBackgroundColor;
        this._isAlternateColor = true;
      }
      sb.AppendLine("        <tr style=\"color: White; background-color: " + this._categoryTitleBackgroundColor + "; font-weight: bold; font-size: 12px; height: 18px; padding: 8px;\">");
      sb.AppendLine("            <td>" + title + "</td>");
      sb.AppendLine("            <td align=\"center\">Features</td>");
      sb.AppendLine("        </tr>");
      sb.AppendLine("        <tr style=\"background-color: " + str + "; padding: 8px;\">");
      sb.AppendLine("            <td style=\"vertical-align: top;\">");
      sb.AppendLine("                <ul>");
    }

    private void GenerateTagsAfterLinks(StringBuilder sb, GridViewType gridViewType, string title)
    {
      sb.AppendLine("                </ul>");
      sb.AppendLine("            </td>");
      sb.AppendLine("            <td style=\"vertical-align: top;\">");
      this.GenerateFeatures(sb, gridViewType, title);
      sb.AppendLine("            </td>");
      sb.AppendLine("        </tr>");
    }

    private void GenerateLinks(StringBuilder sb, string title, GridViewType gridViewType, string organizeWebFormFolder, string organizeWebFormPrefix, Table table)
    {
      if (table.IsContainsPrimaryAndForeignKeyColumnsOnly)
        return;
      string str1 = MyConstants.WordDotAspx;
      if (this._isUseFriendlyUrls)
        str1 = string.Empty;
      string str2;
      if (this._isOrganizeGeneratedWebForms)
      {
        str2 = organizeWebFormFolder + "/" + table.Name + MyConstants.WordWeb + str1;
        switch (gridViewType)
        {
          case GridViewType.FilterBy:
            str2 = organizeWebFormFolder + "/" + table.Name + "By" + this._fkColumn.Name + MyConstants.WordWeb + str1;
            break;
          case GridViewType.Grouping:
            str2 = organizeWebFormFolder + "/" + this._referencingTable.Name + "By" + table.Name + MyConstants.WordWeb + str1;
            break;
        }
      }
      else
      {
        string formFileNamePrefix = Functions.GetWebFormFileNamePrefix(gridViewType, this._organizeWebForm);
        str2 = organizeWebFormPrefix + table.Name + str1;
        switch (gridViewType)
        {
          case GridViewType.FilterBy:
            str2 = formFileNamePrefix + table.Name + "By" + this._fkColumn.Name + str1;
            break;
          case GridViewType.Grouping:
            str2 = formFileNamePrefix + this._referencingTable.Name + "By" + table.Name + str1;
            break;
        }
      }
      if (this._isUseFriendlyUrls)
      {
        if (gridViewType == GridViewType.NotAGridView && title == "Add New & Edit Record")
          sb.AppendLine("                    <li><a href=\"" + str2 + "/add\">" + str2 + "/add</a></li>");
        else if (gridViewType == GridViewType.NotAGridView && title == "Record Details (Read-Only)")
          sb.AppendLine("                    <li>" + str2 + "</li>");
        else
          sb.AppendLine("                    <li><a href=\"" + str2 + "\">" + str2 + "</a></li>");
      }
      else if (gridViewType == GridViewType.NotAGridView && title == "Add New & Edit Record")
        sb.AppendLine("                    <li><a href=\"" + str2 + "?operation=add\">" + str2 + "</a></li>");
      else if (gridViewType == GridViewType.NotAGridView && title == "Record Details (Read-Only)")
        sb.AppendLine("                    <li>" + str2 + "</li>");
      else
        sb.AppendLine("                    <li><a href=\"" + str2 + "\">" + str2 + "</a></li>");
    }

    private void GenerateFeatures(StringBuilder sb, GridViewType gridViewType, string title)
    {
      switch (gridViewType)
      {
        case GridViewType.Redirect:
          sb.AppendLine("                <ul>");
          sb.AppendLine("                    <li><b>Can be used in the administration part of your website</b></li>");
          sb.AppendLine("                    <li>Contains a GridView Server Control that has CRUD (Create, Retrieve, Update, Delete) funtionality.</li>");
          sb.AppendLine("                    <li>Adding a new record redirects to another page</li>");
          sb.AppendLine("                    <li>Updating and existing record redirects to another page</li>");
          sb.AppendLine("                    <li>Delete funtionality uses a JQuery UI Pop-up for delete confirmation</li>");
          sb.AppendLine("                    <li>A link to a read-only Web Form is also provided for all Foreign Key columns (for details on the foreign key)</li>");
          sb.AppendLine("                    <li>Uses model binding to retrieve data</li>");
          sb.AppendLine("                    <li>GridView retrieves data on demand using Skip/Take logic</li>");
          sb.AppendLine("                    <li>GridView uses a Sort Direction Image in the header</li>");
          sb.AppendLine("                    <li>GridView uses Numeric Paging in the footer</li>");
          sb.AppendLine("                    <li>One ASP.NET 4.5 Web Form is generated per table</li>");
          sb.AppendLine("                </ul>");
          break;
        case GridViewType.AddEdit:
          sb.AppendLine("                <ul>");
          sb.AppendLine("                    <li><b>Can be used in the administration part of your website</b></li>");
          sb.AppendLine("                    <li>Contains a GridView Server Control that has CRUD (Create, Retrieve, Update, Delete) funtionality.</li>");
          sb.AppendLine("                    <li>Add a new record on the same page with JQuery animation</li>");
          sb.AppendLine("                    <li>Update an existing record on the same page with JQuery animation</li>");
          sb.AppendLine("                    <li>Delete funtionality uses a JQuery UI Pop-up for delete confirmation</li>");
          sb.AppendLine("                    <li>A JQuery Tooltip pop-up link is provided for all Foreign Key columns (for details on the foreign key)</li>");
          sb.AppendLine("                    <li>Uses model binding to retrieve data</li>");
          sb.AppendLine("                    <li>GridView retrieves data on demand using Skip/Take logic</li>");
          sb.AppendLine("                    <li>GridView uses a Sort Direction Image in the header</li>");
          sb.AppendLine("                    <li>GridView uses Numeric Paging in the footer</li>");
          sb.AppendLine("                    <li>One ASP.NET 4.5 Web Form is generated per table</li>");
          sb.AppendLine("                </ul>");
          break;
        case GridViewType.ReadOnly:
          sb.AppendLine("                <ul>");
          sb.AppendLine("                    <li><b>Can be used in the internal facing part of your website</b></li>");
          sb.AppendLine("                    <li>Contains a GridView Server Control. No CRUD funtionality (read-only).</li>");
          if (this._generateFrom == DatabaseObjectToGenerateFrom.Tables)
          {
            sb.AppendLine("                    <li>A JQuery Tooltip pop-up link is provided for all Foreign Key columns (for details on the foreign key)</li>");
            sb.AppendLine("                    <li>Uses model binding to retrieve data</li>");
            sb.AppendLine("                    <li>GridView retrieves data on demand using Skip/Take logic</li>");
          }
          sb.AppendLine("                    <li>GridView uses a Sort Direction Image in the header</li>");
          sb.AppendLine("                    <li>GridView uses Numeric Paging in the footer</li>");
          sb.AppendLine("                    <li>One ASP.NET 4.5 Web Form is generated per table</li>");
          sb.AppendLine("                </ul>");
          break;
        case GridViewType.MoreInfoOnly:
          sb.AppendLine("                <ul>");
          sb.AppendLine("                    <li><b>Can be used in the internal facing part of your website</b></li>");
          sb.AppendLine("                    <li>Contains a GridView Server Control. No CRUD funtionality (read-only).</li>");
          sb.AppendLine("                    <li>Each row can be viewed for more information on click of the respective button (animated)</li>");
          sb.AppendLine("                    <li>Uses model binding to retrieve data</li>");
          sb.AppendLine("                    <li>GridView retrieves data on demand using Skip/Take logic</li>");
          sb.AppendLine("                    <li>GridView uses a Sort Direction Image in the header</li>");
          sb.AppendLine("                    <li>GridView uses Numeric Paging in the footer</li>");
          sb.AppendLine("                    <li>A JQuery Tooltip pop-up link is provided for all Foreign Key columns (for details on the foreign key)</li>");
          sb.AppendLine("                    <li>One ASP.NET 4.5 Web Form is generated per table</li>");
          sb.AppendLine("                </ul>");
          break;
        case GridViewType.Totals:
          sb.AppendLine("                <ul>");
          sb.AppendLine("                    <li><b>Can be used to show Totals (Money and Number of Records)</b></li>");
          sb.AppendLine("                    <li>Contains a GridView Server Control. No CRUD funtionality (read-only).</li>");
          sb.AppendLine("                    <li>Shows total number of records</li>");
          sb.AppendLine("                    <li>Shows sub and grand totals on the footer for money fields</li>");
          sb.AppendLine("                    <li>Uses model binding to retrieve data</li>");
          sb.AppendLine("                    <li>GridView retrieves data on demand using Skip/Take logic</li>");
          sb.AppendLine("                    <li>GridView uses a Sort Direction Image in the header</li>");
          sb.AppendLine("                    <li>GridView uses Numeric Paging in the footer</li>");
          sb.AppendLine("                    <li>A JQuery Tooltip pop-up link is provided for all Foreign Key columns (for details on the foreign key)</li>");
          sb.AppendLine("                    <li>One ASP.NET 4.5 Web Form is generated for tables that have money data fields</li>");
          sb.AppendLine("                </ul>");
          break;
        case GridViewType.FilterBy:
          sb.AppendLine("                <ul>");
          sb.AppendLine("                    <li><b>Can be used to show Filterable data</b></li>");
          sb.AppendLine("                    <li>Contains a GridView Server Control. No CRUD funtionality (read-only).</li>");
          sb.AppendLine("                    <li>Contains a DropDownList Control that filters the GridView's data on index change</li>");
          sb.AppendLine("                    <li>Uses model binding to retrieve data</li>");
          sb.AppendLine("                    <li>GridView retrieves data on demand using Skip/Take logic</li>");
          sb.AppendLine("                    <li>GridView uses a Sort Direction Image in the header</li>");
          sb.AppendLine("                    <li>GridView uses Numeric Paging in the footer</li>");
          sb.AppendLine("                    <li>A JQuery Tooltip pop-up link is provided for all Foreign Key columns (for details on the foreign key)</li>");
          sb.AppendLine("                    <li>One ASP.NET 4.5 Web Form is generated for each foreign key in each table</li>");
          sb.AppendLine("                </ul>");
          break;
        case GridViewType.Grouping:
          sb.AppendLine("                <ul>");
          sb.AppendLine("                    <li><b>Can be used to show Grouped data with count</b></li>");
          sb.AppendLine("                    <li>Contains a JQuery UI Accordion control with GridView within. No CRUD funtionality (read-only).</li>");
          sb.AppendLine("                    <li>Uses model binding to retrieve data</li>");
          sb.AppendLine("                    <li>GridView retrieves data on demand using Skip/Take logic</li>");
          sb.AppendLine("                    <li>Shows grouping by the respective group</li>");
          sb.AppendLine("                    <li>Shows count per respective group</li>");
          sb.AppendLine("                    <li>E.g. Orders by Shipper, Territories by Region</li>");
          sb.AppendLine("                    <li>One ASP.NET 4.5 Web Form is generated for each table referencing the current table</li>");
          sb.AppendLine("                </ul>");
          break;
        case GridViewType.NotAGridView:
          if (title == "Add New & Edit Record")
          {
            sb.AppendLine("                <ul>");
            sb.AppendLine("                    <li><b>Use to Add a New Record or Edit an Existing Record</b></li>");
            sb.AppendLine("                    <li>Contains JQuery Validation or ASP.Net Validation</li>");
            sb.AppendLine("                    <li>Contains JQuery UI Date Controls for date fields</li>");
            sb.AppendLine("                    <li>Contains bound DropDownList Web Control for foreign fields</li>");
            sb.AppendLine("                    <li>You can get here from the \"GridView with Add, Edit Redirect, & Delete\" Web Form when clicking the Add New Record link or the Edit button</li>");
            sb.AppendLine("                    <li>One ASP.NET 4.5 Web Form is generated per table</li>");
            sb.AppendLine("                </ul>");
            break;
          }
          if (title == "Record Details (Read-Only)")
          {
            sb.AppendLine("                <ul>");
            sb.AppendLine("                    <li><b>Use to show Read-Only detail of a record</b></li>");
            sb.AppendLine("                    <li>Shows details of a record (Read-Only)</li>");
            sb.AppendLine("                    <li>You can get here from the \"GridView with Add, Edit Redirect, & Delete\" Web Form when clicking the foreign key links</li>");
            sb.AppendLine("                    <li>One ASP.NET 4.5 Web Form is generated per table</li>");
            sb.AppendLine("                </ul>");
            break;
          }
          if (!(title == "Unbound Web Form"))
            break;
          sb.AppendLine("                <ul>");
          sb.AppendLine("                    <li><b>Use to add your own code in the Code File (Code Behind)</b></li>");
          sb.AppendLine("                    <li>Web Forms that are not bound to the database</li>");
          sb.AppendLine("                    <li>Contains JQuery Validation or ASP.Net Validation</li>");
          sb.AppendLine("                    <li>Contains JQuery UI Date Controls for date fields</li>");
          sb.AppendLine("                    <li>Contains unbound DropDownList Web Control for foreign fields</li>");
          sb.AppendLine("                    <li>One ASP.NET 4.5 Web Form is generated per table</li>");
          sb.AppendLine("                </ul>");
          break;
        case GridViewType.Inline:
          sb.AppendLine("                <ul>");
          sb.AppendLine("                    <li><b>Can be used in the administration part of your website</b></li>");
          sb.AppendLine("                    <li>Contains a GridView Server Control that has CRUD (Create, Retrieve, Update, Delete) funtionality.</li>");
          sb.AppendLine("                    <li>Add a new record on the same page inline the header of the GridView</li>");
          sb.AppendLine("                    <li>Uses server validation</li>");
          sb.AppendLine("                    <li>Update an existing record inline on the same page</li>");
          sb.AppendLine("                    <li>Delete funtionality uses a JQuery UI Pop-up for delete confirmation</li>");
          sb.AppendLine("                    <li>A link to a read-only Web Form is also provided for all Foreign Key columns (for details on the foreign key)</li>");
          sb.AppendLine("                    <li>Uses model binding to retrieve data</li>");
          sb.AppendLine("                    <li>GridView retrieves data on demand using Skip/Take logic</li>");
          sb.AppendLine("                    <li>GridView uses a Sort Direction Image in the header</li>");
          sb.AppendLine("                    <li>GridView uses Numeric Paging in the footer</li>");
          sb.AppendLine("                    <li>One ASP.NET 4.5 Web Form is generated per table</li>");
          sb.AppendLine("                </ul>");
          break;
        case GridViewType.Search:
          sb.AppendLine("                <ul>");
          sb.AppendLine("                    <li><b>Can be used in the administration part of your website</b></li>");
          sb.AppendLine("                    <li>Contains a GridView Server Control that has CRUD (Create, Retrieve, Update, Delete) funtionality.</li>");
          sb.AppendLine("                    <li>Contains search functionality in the header, per column*</li>");
          sb.AppendLine("                    <li>Adding a new record redirects to another page</li>");
          sb.AppendLine("                    <li>Updating and existing record redirects to another page</li>");
          sb.AppendLine("                    <li>Uses server validation</li>");
          sb.AppendLine("                    <li>Delete funtionality uses a JQuery UI Pop-up for delete confirmation</li>");
          sb.AppendLine("                    <li>A link to a read-only Web Form is also provided for all Foreign Key columns (for details on the foreign key)</li>");
          sb.AppendLine("                    <li>GridView uses a Sort Direction Image in the header</li>");
          sb.AppendLine("                    <li>GridView uses Numeric Paging in the footer</li>");
          sb.AppendLine("                    <li>One ASP.NET 4.5 Web Form is generated per table</li>");
          sb.AppendLine("                </ul>");
          break;
      }
    }
  }
}
